/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab2.app;



import lab2.exceptions.NoRootException;
import lab2.io.ConsoleInputManager;
import lab2.io.ConsoleOutputManager;
import lab2.io.FileInputManager;
import lab2.io.FileOutputManager;
import lab2.io.InputManager;
import lab2.io.OutputManager;
import lab2.logic.Function;
import lab2.logic.NonlinearSystem;
import lab2.logic.methods.Method;
import lab2.logic.methods.NewtonMethod;
import lab2.plot.Graph;
import lombok.Cleanup;
import lombok.Getter;
import lombok.Setter;

public class App {
    static private App instanse;
    public static App getInstanse() {
        if(instanse == null) {
            instanse = new App();
        }
        return instanse;
    }
    

    @Getter @Setter
    private InputManager in;
    @Getter 
    private OutputManager out;

    @Getter @Setter
    private boolean running;

    private App() {
        out = new ConsoleOutputManager();
        in = new ConsoleInputManager();

    }
    void print_dimka(String text, int gap){
        String d = "";
        for(int i=0;i<gap;i++){
            d=d + " ";
        }
        out.print(d + "__┌──┐__\n"+d+" (-■_■)\n"+d+" />  П    "+text+"   \n"+d+"    [X]");
    }

    public void printGreetings() {
    
        out.print("\n█▄░█ █▀█ █▄░█   █░░ █ █▄░█ █▀▀ ▄▀█ █▀█  \n█░▀█ █▄█ █░▀█   █▄▄ █ █░▀█ ██▄ █▀█ █▀▄  \n\n█▀▀ █▀█ █░█ ▄▀█ ▀█▀ █ █▀█ █▄░█ █▀   █▀ █▀█ █░░ █░█ █▀▀ █▀█\n██▄ ▀▀█ █▄█ █▀█ ░█░ █ █▄█ █░▀█ ▄█   ▄█ █▄█ █▄▄ ▀▄▀ ██▄ █▀▄");

        print_dimka("by @dimka_228",30);
        //out.print("\t \t \t \t \t \t \tby @dimka_228");
        out.print("\n");
        
        
    }
    
    public void start(){
       
        
        setRunning(true);
        printGreetings();
        //test();
        while (running) {
            try{
                run();
            } catch(Exception e){
                out.error(e.getMessage());
            }
        }
        exit();
  
    }

    public void run() throws Exception{
        int cmd = in.readCommand();
      

        if(cmd == 3) {
            stop();
            return;
        }
        if(cmd == 1) {
            
            Function f = in.readEquation().getFunction();
            double[] interval=null;
            double accuracy;
            boolean readFromFile  = in.readFileOrConsole()==2;
            if(readFromFile){
                String path = in.readPath();
          
                @Cleanup InputManager fin =new FileInputManager(path);
                interval = fin.readInterval();
                accuracy = fin.readAccuracy();
            }else{
                interval = in.readInterval();
                accuracy = in.readAccuracy();
            }

            Graph g = new Graph("График функции");
            g.graph(interval[0], interval[1], f);

            Method m = in.readMethod().getMethod();
            
            m.setFunction(f);
            m.setA(interval[0]);
            m.setB(interval[1]);
            m.setAccuracy(accuracy);
            if(!Function.Utils.checkFunctionHasRoot(f, interval[0], interval[1])) throw new NoRootException();
            m.solve();


            boolean writeToFile  = in.readFileOrConsole()==2;
            if(writeToFile){
                String path = in.readPath();
          
                @Cleanup
                OutputManager fout =new FileOutputManager(path);

                //fout.print(m.getPrintableSolution());
                fout.print(m.formatSolution());
         
            }
            out.print(m.formatSolution());
            
            
            

        }
        else if(cmd == 2) {
            NonlinearSystem s = in.readNonlinearSystem();
            double[] p= in.readPoint();

            double accuracy = in.readAccuracy();
            
            NewtonMethod m = new NewtonMethod();
            m.setAccuracy(accuracy);
            m.setX0(p[0]);
            m.setY0(p[1]);
            m.setSystem(s);

            Graph g = new Graph("График системы");
            g.system(p[0]-5, p[0]+5, s);

            m.solve();
            out.print("решение: " + m.getSolution());
            out.print("вектор ошибок: " + m.getErrors());
            out.print("количество итераций: "+ m.getN());
        }  
    }

    public void stop(){
        running = false;
    }


    public void exit(){
        System.exit(0);
    }


    
}
